# -*- coding: utf-8 -*-
"""Breast Cancer Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_jXSVE9weK0kPq_evXYSdBxpVgz5TmNw

Data Preprocessing
"""

breast_cancer = sklearn.datasets.load_breast_cancer()

print(breast_cancer)

data_frame = pd.DataFrame(breast_cancer.data, columns = breast_cancer.feature_names)

# Importinig the dependancies
import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC   # Can also be used

data_frame.head()

data_frame['label'] = breast_cancer.target

data_frame.head()

data_frame.shape

data_frame.info()

data_frame['label'].value_counts()

"""Seprating features and labels"""

X = data_frame.drop(['label'], axis=1)
Y = data_frame['label']

print(X)
print(Y)

"""Standardizing the data"""

scaler = StandardScaler()

scaler.fit(X)

standard_data = scaler.transform(X)

X = standard_data
Y = data_frame['label']

print(X)
print(Y)

"""Train and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2, stratify = Y)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Model Evaluation"""

# Training Data Accuracy
training_data_prediction = model.predict(X_train)

training_data_accuracy = accuracy_score(Y_train, training_data_prediction)

print("Accuracy on training Data: ",training_data_accuracy)

# Test Data Accuracy
test_data_prediction = model.predict(X_test)

test_data_accuracy = accuracy_score(Y_test, test_data_prediction)
 
print("Accuracy on test Data: ",test_data_accuracy)

"""Making a predictive system"""

input_data = (15.1,22.02,97.26,712.8,0.09056,0.07081,0.05253,0.03334,0.1616,0.05684,0.3105,0.8339,2.097,29.91,0.004675,0.0103,0.01603,0.009222,0.01095,0.001629,18.1,31.69,117.7,1030,0.1389,0.2057,0.2712,0.153,0.2675,0.07873)

input_array = np.asarray(input_data)

reshape_array = input_array.reshape(1, -1)

standardizied_data = scaler.transform(reshape_array)

prediction = model.predict(standardizied_data)

print(prediction)

if prediction[0] == 0:
  print("Cancer is Malignant")
else:
  print("Cancer is Benign")

